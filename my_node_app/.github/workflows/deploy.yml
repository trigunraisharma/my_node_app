name: my_node_app (with Trivy Security Scan)

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my_node_app
  ECS_CLUSTER: my_node_cluster
  ECS_SERVICE: my_node_service
  CONTAINER_NAME: my_node_container
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # -------------------------------------
  # 🧱 Job 1: Build & Test (Node.js CI)
  # -------------------------------------
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.20.0-bullseye-slim"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          if [ -f package.json ]; then
            echo "Running npm test..."
            npm test || exit 1
          else
            echo "No tests found, skipping..."
          fi

      - name: Build Docker image
        run: docker build -t test-image .

  # -------------------------------------
  # 🔍 Job 2: Security Scan with Trivy
  # -------------------------------------
  security_scan:
    runs-on: ubuntu-latest
    needs: build_and_test  # only run if CI passed
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: table
          exit-code: 0  # Do not fail the pipeline on scan result

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: test-image
          format: table
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          exit-code: 1  # Fail if HIGH/CRITICAL vulnerabilities are found

  # -------------------------------------
  # 🚀 Job 3: Deploy to ECS (CD)
  # -------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: security_scan  # only deploy if scan passed
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Update ECS task definition with new image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          jq --arg IMAGE_URI "$IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE_URI' ecs-task-def.json > task-def-new.json

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: task-def-new.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

