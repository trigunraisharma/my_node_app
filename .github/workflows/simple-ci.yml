name: my_node_app

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: my_node_app
  ECS_CLUSTER: my_node_cluster
  ECS_SERVICE: my_node_task_service
  ECS_TASK_DEFINITION: my_node_task.json
  CONTAINER_NAME: my_node_container
  IMAGE_TAG: ${{ github.sha }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
            
      - name: Install dependencies
        working-directory: my_node_app
        run: npm install

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./my_node_app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT        

      - name: Get current ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition my_node_task \
            --query 'taskDefinition' \
            --output json > task-def.json

      - name: Clean ECS task definition file
        run: |
          jq 'del(
            .compatibilities,
            .taskDefinitionArn,
            .requiresAttributes,
            .revision,
            .status,
            .registeredAt,
            .registeredBy,
            .enableFaultInjection
          )' task-def.json > clean-task-def.json
          mv clean-task-def.json ${{ env.ECS_TASK_DEFINITION }}

      - name: Update ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # - name: Register new task definition
      #   id: register-task
      #   run: |
      #     NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
      #       --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
      #       --query 'taskDefinition.taskDefinitionArn' \
      #       --output text)
      #     echo "new_task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          
      - name: Deploy to ECS service
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with: 
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true

      # - name: Tag ECS Task Definition Revision
      #   if: success()
      #   run: |
      #     echo "Fetching latest task definition ARN..."
      #     TASK_DEF_ARN=$(aws ecs describe-task-definition \
      #       --task-definition my_node_task \
      #       --query 'taskDefinition.taskDefinitionArn' \
      #       --output text)

      #     echo "Tagging ECS task definition: $TASK_DEF_ARN"
      #     aws ecs tag-resource \
      #       --resource-arn $TASK_DEF_ARN \
      #       --tags \
      #         key=GitCommit,value=${{ github.sha }} \
      #         key=DeployedBy,value=GitHubActions \
      #         key=Environment,value=Production \
      #         key=App,value=${{ env.ECR_REPOSITORY }}